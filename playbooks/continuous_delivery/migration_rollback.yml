# Required vars:
# migration_plan.yml

- hosts: all
  gather_facts: false
  become: true

  vars:
    COMMAND_PREFIX: >
      . {{ APPLICATION_PATH }}/{{ APPLICATION_NAME }}_env;
      DB_MIGRATION_USER={{ DB_MIGRATION_USER }} DB_MIGRATION_PASS={{ DB_MIGRATION_PASS }}
      /edx/bin/python.{{ APPLICATION_NAME }} /edx/bin/manage.{{ APPLICATION_NAME }}"
    
    EDX_PLATFORM_SETTINGS: "aws"
    rollback_result: rollback_result.yml
    original_state: original_state.yml

  vars_files:
    - roles/edxapp/defaults/main.yml

  tasks:
    - name: Create a temporary directory for the migration output.
      command: mktemp -d
      become_user: "{{ APPLICATION_USER }}"
      register: temp_output_dir

    - name: generate current migration state
      shell: >
        {{ COMMAND_PREFIX }} show_unapplied_migrations
        --output_file '{{ temp_output_dir.stdout }}/{{ original_state }}'
      become_user: "{{ APPLICATION_USER }}"
      when: APPLICATION_NAME != "edxapp"

    - name: generate current migration state for edxapp
      shell: >
        {{ COMMAND_PREFIX }} {{ SUB_APPLICATION_NAME }} show_unapplied_migrations
        --database '{{ item }}'
        --output_file '{{ temp_output_dir.stdout }}/{{ item }}_{{ original_state }}'
        --settings '{{ EDX_PLATFORM_SETTINGS }}'
      become_user: "{{ APPLICATION_USER }}"
      when: APPLICATION_NAME == "edxapp" and item != "read_replica"
      with_items: edxapp_databases.keys()

    - name: migrate to original versions
      shell: >
        {{ COMMAND_PREFIX }} run_specific_migrations
        --migration '{{ item[0] }}' '{{ item[1] }}'
        --output_file '{{ temp_output_dir.stdout }}/{{ migration_plan }}'
      become_user: "{{ APPLICATION_USER }}"
      with_items: initial_states
      when: APPLICATION_NAME != "edxapp"

    - name: migrate to original versions for edxapp
      shell: >
        {{ COMMAND_PREFIX }} {{ SUB_APPLICATION_NAME }} run_specific_migrations
        --migration '{{ item[0] }}' '{{ item[1] }}'
        --output_file '{{ temp_output_dir.stdout }}/{{ migration_plan }}'
        --database '{{ item }}'
      become_user: "{{ APPLICATION_USER }}"
      with_items: initial_states
      when: APPLICATION_NAME != "edxapp"

    - name: List all migration files
      action: "command ls -1 {{ temp_output_dir.stdout }}"
      register: migration_files

    - name: Transfer artifacts to the proper place.
      fetch:
        src: "{{ temp_output_dir.stdout }}/{{ item }}"
        dest: "{{ ARTIFACT_PATH }}/"
        flat: True
        fail_on_missing: True
        mode: 0700
      with_items:
        - "{{ migration_files.stdout_lines }}"

    - name: Send Hipchat notification cleanup has finished
      hipchat_2_0_0_1:
        api: "{{ HIPCHAT_URL }}"
        token: "{{ HIPCHAT_TOKEN }}"
        room: "{{ HIPCHAT_ROOM }}"
        msg: "Migrations have completed."
      ignore_errors: yes
      when: HIPCHAT_TOKEN is defined